name: Java CI with Terraform-Sonarcloud-Maven-ECR-EKS

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      SECRET_NAME: 'ecrpullsecret'
      ECR_USERNAME: 'AWS'
      ECR_EMAIL: 'emmidim01@gmail.com'
      SONAR_HOST_URL: 'https://sonarcloud.io'

    steps:
    - name: Checkout Repo
      uses: actions/checkout@v4

    - name: Install kubectl
      uses: azure/setup-kubectl@v2.0
      with:
        version: 'v1.24.0' # default is latest stable

    # - name: Install Terraform
    #   run: |
    #     wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
    #     echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
    #     sudo apt update && sudo apt install terraform


    # - name: Terraform Init
    #   env:
    #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #   run: terraform init
    
    # - name: Terraform Validate
    #   env:
    #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #   run: terraform validate 

    # # Generates an execution plan for Terraform
    # - name: Terraform Plan
    #   env:
    #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #   run: terraform plan -lock=false
  
    # - name: Terraform Apply
    #   env:
    #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #   run: terraform apply --auto-approve --lock=false

    - name: Set up JDK 17
      uses: actions/setup-java@v1
      with:
        java-version: '17'
        distribution: 'temurin'   # ignore 
        cache: maven
    - name: Analysis with Sonarcloud
      run: mvn -B clean compile sonar:sonar -Dsonar.token=${{ secrets.SONAR_TOKEN }} --file pom.xml
    - name: Analysis with Sonarcloud
      uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      with:
        args: |
          -Dsonar.projectKey=olorunfemi007_java-deploy
          -Dsonar.organization=olorunfemi007
          -Dsonar.java.binaries=/home/runner/work/gameoflife/gameoflife/target
    - name: Build with Maven
      run: mvn -B package --file pom.xml
    - name: Move WAR file to build context
      run: cp /home/runner/work/gameoflife/gameoflife/target/calculator.war .
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build & Push image
      uses: docker/build-push-action@v3
      with:
        context: .
        registry: ${{ steps.login-ecr.outputs.registry }}
        repository: ${{ steps.login-ecr.outputs.registry }}/calculator
        push: true
        tags: ${{ steps.login-ecr.outputs.registry }}/calculator
        add_git_labels: true
        tag_with_ref: true

    - name: Update kube config
      run: aws eks update-kubeconfig --region us-east-1 --name java_app_cluster

    - name: Check for Kubernetes Secret
      id: check-secret
      run: |
        NAMESPACE=default # specify the namespace

        if kubectl get secret $SECRET_NAME --namespace $NAMESPACE; then
          echo "Secret $SECRET_NAME exists"
          echo "::set-output name=secret_exists::true"
        else
          echo "Secret $SECRET_NAME does not exist"
          DOCKER_SECRET=$(aws ecr --region=us-east-1 get-authorization-token --output text --query authorizationData[].authorizationToken | base64 -d | cut -d: -f2)
          echo "Login Result: $DOCKER_SECRET"
          kubectl create secret docker-registry $SECRET_NAME --docker-server=${{ steps.login-ecr.outputs.registry }} --docker-username=$ECR_USERNAME --docker-password=$DOCKER_SECRET --docker-email=$ECR_EMAIL

        fi

    - name: Deploy to EKS
      run: |
        kubectl apply -f deployment/deploy.yaml 
        kubectl apply -f deployment/pod_service.yaml 
        kubectl apply -f deployment/hpa.yaml 
        kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml




          

     

